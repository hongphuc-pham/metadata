# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      # digest: ${{ steps.build.outputs.digest }}
      digest: ${{ steps.container_info.outputs.image-digest }}

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Checkout the repository
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v2.3.4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # v2.0.0

    - name: Authenticate Docker
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # v2.0.0
      with:
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a # v4.0.1
      with:
        images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8 # v3.0.0
      id: build
      with:
        push: true
        # tags: ${{ steps.meta.outputs.tags }} 
        tags: ghcr.io/${{ github.repository }}:latest
        labels: ${{ steps.meta.outputs.labels }}
        #platforms: linux/amd64,linux/arm64,darwin/amd64

    - name: Output image
      id: image
      run: |
        # NOTE: Set the image as an output because the `env` context is not
        # available to the inputs of a reusable workflow call.
        image_name="${IMAGE_REGISTRY}/${IMAGE_NAME}"
        echo "image=$image_name" >> "$GITHUB_OUTPUT"

    - name: Get container info
      id: container_info
      run: |
          image_digest="$(docker inspect "${IMAGE_NAME}:latest" --format '{{ index .RepoDigests 0 }}' | awk -F '@' '{ print $2 }')"
          echo "::set-output name=image-digest::${image_digest}"
  sign:
    runs-on: ubuntu-20.04
    needs: [build]
 
    permissions:
      packages: write
      id-token: write
      
    env:
      IMAGE_DIGEST: ${{ needs.docker.outputs.image-digest }}

    steps:
    - name: Write signing key to disk
      run: 'echo "$KEY" > cosign.key'
      shell: bash
      env:
        KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}   

    - name: Login to ghcr.ioAuthenticate Docker
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # v2.0.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Sign the published Docker image
      env:
        COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_EXPERIMENTAL: 1
      run: |
          # cosign sign  --key cosign.key ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:${{ github.run_id }}
          cosign sign --key cosign.key "${IMAGE_NAME}@${IMAGE_DIGEST}"
    

  # This step calls the container workflow to generate provenance and push it to
  # the container registry.
  provenance:
    needs: [build]
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    # if: startsWith(github.ref, 'refs/tags/')
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
    with:
      #private-repository: true
      image: ${{ needs.build.outputs.image }}
      digest: ${{ needs.build.outputs.digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
